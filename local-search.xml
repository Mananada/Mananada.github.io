<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Angular</title>
    <link href="/posts/58911.html"/>
    <url>/posts/58911.html</url>
    
    <content type="html"><![CDATA[<h1 id="Angular：基于-TypeScript-的-Javascript-框架"><a href="#Angular：基于-TypeScript-的-Javascript-框架" class="headerlink" title="Angular：基于 TypeScript 的 Javascript 框架"></a>Angular：基于 TypeScript 的 Javascript 框架</h1><h2 id="1-Angular-Cli脚手架"><a href="#1-Angular-Cli脚手架" class="headerlink" title="1. Angular Cli脚手架"></a><strong>1. Angular Cli脚手架</strong></h2><p><strong>1.1创建工程</strong></p><p>若之前安装cli失败过，先执行A，B两句命令</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">　A：<span class="hljs-built_in">npm</span> uninstall -g angular-cli <br> <br>　B：<span class="hljs-built_in">npm</span> cache verify<br></code></pre></td></tr></table></figure><p>因为angular-cli是用typescript写的</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g typescript typings<br></code></pre></td></tr></table></figure><p>然后全局安装 Angular CLI</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @angular/cli<br></code></pre></td></tr></table></figure><p>检测是否安装成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ng <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><img src="/posts/58911/2022-06-09-22-56-29.png"></p><p>打开vscode终端 创建工程</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">ng <span class="hljs-keyword">new</span> <span class="hljs-type">my</span>-demo <span class="hljs-comment">//my-demo为项目名称</span><br></code></pre></td></tr></table></figure><p>启动angular项目</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">cd <span class="hljs-keyword">my</span>-demo<br>ng serve <span class="hljs-comment">--open</span><br></code></pre></td></tr></table></figure><p><strong>1.2 目录结构</strong></p><p><img src="/posts/58911/2022-06-09-22-57-34.png"></p><h2 id="2-理解Angular"><a href="#2-理解Angular" class="headerlink" title="2. 理解Angular"></a>2. 理解Angular</h2><h3 id="2-1-Components组件"><a href="#2-1-Components组件" class="headerlink" title="2.1 Components组件"></a>2.1 Components组件</h3><h4 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a><strong>创建组件</strong></h4><ol><li><strong>Angular CLI 创建一个组件</strong></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">ng generate component heroes <span class="hljs-comment">//heroes组件名称</span><br>ng g c heros <span class="hljs-comment">//简写版</span><br></code></pre></td></tr></table></figure><p><img src="/posts/58911/2022-06-09-22-58-34.png"></p><p>在app.module.ts的declarations中注入组件</p><ol><li><p><strong>手动创建组件</strong></p><p>在src-&gt;app下创建一个新文件：组件名.component.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 顶部添加import语句</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-comment">//添加组件装饰器</span><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-demo&#x27;</span>, <span class="hljs-comment">// 选择器实例化组件，在根组件的html，将组件挂上去</span><br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app-demo.component.html&#x27;</span>, <span class="hljs-comment">//引入组件显示信息的HTML模板</span><br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app-demo.component.css&#x27;</span>] <span class="hljs-comment">//引入组件CSS样式</span><br><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComponentOverviewComponent</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>@Component最常用的几个选项:</p><p><strong>selector</strong>：这个 CSS 选择器用于在模板中标记出该指令，并触发该指令的实例化。</p><p><strong>template</strong>：组件的内联模板</p><p><strong>templateUrl</strong>：组件模板文件的 URL</p><p><strong>styleUrls</strong>：组件样式文件</p><p><strong>styles</strong>：组件内联样式</p></li></ol><h4 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a><strong>组件生命周期</strong></h4><ol><li>ngOnChanges</li><li>ngOnInit</li><li>ngDoCheck</li><li>ngAfterContentInit</li><li>ngAfterContentChecked</li><li>ngAfterViewInit</li><li>ngAfterViewChecked</li><li>ngOnDestory：</li></ol><h3 id="2-2-Templates模板-HTML"><a href="#2-2-Templates模板-HTML" class="headerlink" title="2.2 Templates模板 - HTML"></a>2.2 Templates模板 - HTML</h3><p>相比较Vue写在data中的数据。angular直接将数据定义在组件所在的class类中</p><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3&gt; <span class="hljs-title class_">Current</span> <span class="hljs-attr">customer</span>: &#123;&#123; currentCustomer &#125;&#125;&lt;/h3&gt;<br></code></pre></td></tr></table></figure><h4 id="属性绑定：设置特定的元素属性"><a href="#属性绑定：设置特定的元素属性" class="headerlink" title="属性绑定：设置特定的元素属性"></a>属性绑定：设置特定的元素属性</h4><p><strong>Attribute绑定</strong></p><p>相比较Vue中的“:”(v-bind)绑定属性，angular中使用” <strong>[ ]</strong> “来绑定属性。</p><p>① 属性名（字符串形式）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div [id]=<span class="hljs-string">&quot;&#x27;box&#x27;&quot;</span>&gt;绑定字符串&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>② 变量形式</p><p>在组件TS中声明变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div [id]=<span class="hljs-string">&quot;box&quot;</span>&gt;绑定变量名&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>html文件中属性绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">box</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;app-box&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>class类绑定</strong></p><p>① 单一类绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3 [<span class="hljs-keyword">class</span>.<span class="hljs-property">h3</span>-dom]=<span class="hljs-string">&quot;true&quot;</span>&gt;单一类绑定&lt;/h3&gt;<br></code></pre></td></tr></table></figure><p>② 多重类绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3 [<span class="hljs-keyword">class</span>]=<span class="hljs-string">&quot;&#x27;h3-dom font-w string&#x27;&quot;</span>&gt;多重类绑定&lt;/h3&gt;<br></code></pre></td></tr></table></figure><p>③ class条件渲染</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3 [<span class="hljs-keyword">class</span>]=<span class="hljs-string">&quot;&#123;&#x27;h3-dom&#x27;:false,&#x27;title-dom&#x27;:true&#125;&quot;</span>&gt;<span class="hljs-keyword">class</span>条件渲染&lt;/h3&gt;<br></code></pre></td></tr></table></figure><p>④ class数组渲染</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3 [<span class="hljs-keyword">class</span>]=<span class="hljs-string">&quot;[&#x27;h3-dom&#x27;,&#x27;title-dom&#x27;]&quot;</span>&gt;<span class="hljs-keyword">class</span>数组渲染&lt;/h3&gt;<br></code></pre></td></tr></table></figure><p><strong>style样式绑定</strong></p><p>① 单一样式绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3 [style.<span class="hljs-property">width</span>]=<span class="hljs-string">&quot;&#x27;300px&#x27;&quot;</span>&gt;单一样式绑定&lt;/h3&gt;<br></code></pre></td></tr></table></figure><p>② 多样式绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;h3 [style]=<span class="hljs-string">&quot;&#x27;width:300px;color:blue&#x27;&quot;</span>&gt;多样式绑定&lt;/h3&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> [<span class="hljs-attr">style</span>]=<span class="hljs-string">&quot;&#123;&#x27;width&#x27;:&#x27;300px&#x27;,&#x27;color&#x27;:&#x27;blue&#x27;&#125;&quot;</span>&gt;</span>多样式绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>相比较Vue使用v-if，v-show；angular使用*ngIf</p><p> *<strong>ngIf</strong>是直接影响元素是否被渲染，而非控制元素的显示和隐藏</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div *ngIf=<span class="hljs-string">&quot;isMax&quot;</span>&gt;isMax==<span class="hljs-literal">true</span>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>相比较Vue使用v-for；angular使用*<strong>ngFor</strong></p><p>在组件TS中声明变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-attr">colors</span>:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = [ <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span> ];<br></code></pre></td></tr></table></figure><p>html文件中循环</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div *ngFor=<span class="hljs-string">&quot;let color of colors let i=index let odd=odd&quot;</span>&gt;<br>  &#123;&#123;odd&#125;&#125;<br>  &#123;&#123;i&#125;&#125;<br>  &#123;&#123;color&#125;&#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>效果</p><p><img src="/posts/58911/2022-06-09-22-59-42.png"></p><p>Vue中只能通过v-if，else-if来侧面实现；但angular实现了一般计算机语言的switch-case语法：*<strong>ngSwitch</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>    status = <span class="hljs-number">1</span>;<br>&#125;<br><br>  &lt;ul [ngSwitch]=<span class="hljs-string">&quot;status&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>已支付<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>订单已经确认<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span> <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>已发货<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngSwitchDefault</span>&gt;</span>无效<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  &lt;/ul&gt;<br></code></pre></td></tr></table></figure><h4 id="事件绑定：侦听元素更改事件"><a href="#事件绑定：侦听元素更改事件" class="headerlink" title="事件绑定：侦听元素更改事件"></a>事件绑定：侦听元素更改事件</h4><p><strong>① 绑定到事件</strong></p><p>相对于Vue使用@来绑定事件，angular中使用 <strong>(事件类型)&#x3D;”执行函数”</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>  <span class="hljs-title function_">clickFunc</span>(<span class="hljs-params">e:Event</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你点击了按钮！&quot;</span>)<br>  &#125;<br>&#125;<br><br>&lt;button (click)=<span class="hljs-string">&quot;clickFunc($event)&quot;</span>&gt;点击&lt;<span class="hljs-regexp">/button&gt; /</span><span class="hljs-regexp">/$event表示当前事件对象</span><br></code></pre></td></tr></table></figure><p>**模板引用变量  #**（响应输入）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params">value:<span class="hljs-built_in">string</span></span>)&#123;  <span class="hljs-comment">//传入value，类型为string</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>  &#125;<br>&#125;<br><br>&lt;input #userName <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> (input)=<span class="hljs-string">&quot;inputChange($event)&quot;</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;getUserName(userName.value)&quot;</span>&gt;</span>获取userName<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="数据双向绑定：属性绑定与事件绑定结合"><a href="#数据双向绑定：属性绑定与事件绑定结合" class="headerlink" title="数据双向绑定：属性绑定与事件绑定结合"></a>数据双向绑定：属性绑定与事件绑定结合</h4><p>相对于Vue中的v-model。angular则是把属性绑定和事件绑定结合起来用</p><p>**[(ngModel)]**只对表单元素有效（input、select、textarea）,使用之前需要导入<code>FormsModule</code>板块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FormsModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;<br><br><span class="hljs-meta">@NgModule</span>(&#123;<br>  <span class="hljs-comment">// 申明组件内用到的视图</span><br>  <span class="hljs-attr">declarations</span>: [<br>    <span class="hljs-title class_">AppComponent</span>,<br>    <span class="hljs-title class_">HelloComponent</span>,<br>  ],<br>  <span class="hljs-comment">//引入模块需要的类</span><br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">BrowserModule</span>,<br>    <span class="hljs-title class_">AppRoutingModule</span>,<br>    <span class="hljs-title class_">FormsModule</span><br>  ],<br>  <span class="hljs-comment">//全局服务</span><br>  <span class="hljs-attr">providers</span>: [],<br>  <span class="hljs-comment">//根组件</span><br>  <span class="hljs-attr">bootstrap</span>: [<span class="hljs-title class_">AppComponent</span>]<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>  <span class="hljs-attr">title</span>:<span class="hljs-built_in">string</span>=<span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>&lt;input [(ngModel)]=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>title:&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="2-3-Directives指令"><a href="#2-3-Directives指令" class="headerlink" title="2.3 Directives指令"></a>2.3 Directives指令</h3><h3 id="2-4-Dependency-Injection依赖注入"><a href="#2-4-Dependency-Injection依赖注入" class="headerlink" title="2.4 Dependency Injection依赖注入"></a>2.4 Dependency Injection依赖注入</h3><h2 id="3-开发指南"><a href="#3-开发指南" class="headerlink" title="3. 开发指南"></a>3. 开发指南</h2><h3 id="3-1-routing路由和navigation导航"><a href="#3-1-routing路由和navigation导航" class="headerlink" title="3.1 routing路由和navigation导航"></a>3.1 routing路由和navigation导航</h3><h3 id="3-2-forms表单"><a href="#3-2-forms表单" class="headerlink" title="3.2 forms表单"></a>3.2 forms表单</h3><h4 id="表单-API-汇总"><a href="#表单-API-汇总" class="headerlink" title="表单 API 汇总"></a>表单 API 汇总</h4><p>基础类</p><ul><li><code>FormControl</code> 实例用于追踪<strong>单个表单控件</strong>的值和验证状态。</li><li><code>FormGroup</code> 用于追踪一个<strong>表单控件组</strong>的值和状态。</li><li><code>FormArray</code> 用于追踪<strong>表单控件数组</strong>的值和状态。</li><li><code>FormBuilder</code>  一个可注入的服务，提供一些用于提供创建<strong>控件实例</strong>的工厂方法</li></ul><p>基础指令</p><ul><li><p>FormControlDirective  把一个独立的 FormControl 实例绑定到表单控件元素。</p></li><li><p>FormControlName  把一个现有 FormGroup 中的 FormControl 实例根据名字绑定到表单控件元素。</p></li><li><p>FormGroupDirective  把一个现有的 FormGroup 实例绑定到 DOM 元素。</p></li><li><p>FormGroupName  把一个内嵌的 FormGroup 实例绑定到一个 DOM 元素。</p></li><li><p>FormArrayName  把一个内嵌的 FormArray 实例绑定到一个 DOM 元素。</p></li></ul><h4 id="响应式表单"><a href="#响应式表单" class="headerlink" title="响应式表单"></a><strong>响应式表单</strong></h4><h5 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a><strong>表单控件</strong></h5><p>① 注册响应式表单</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ReactiveFormsModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;<br><br><span class="hljs-meta">@NgModule</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-comment">// other imports ...</span><br>    <span class="hljs-title class_">ReactiveFormsModule</span><br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123; &#125;<br></code></pre></td></tr></table></figure><p>② 注册表单控件：<strong>FormControl</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FormControl</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameEditorComponent</span> &#123;<br><span class="hljs-attr">age</span>:<span class="hljs-title class_">FormControl</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormControl</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//使用这种模板绑定语法，把该表单控件注册给了模板中名为 age 的输入元素。这样，表单控件和 DOM 元素就可以互相通讯了：视图会反映模型的变化，模型也会反映视图中的变化</span><br><br>年龄：&lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> [formControl]=<span class="hljs-string">&quot;age&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age:&#123;&#123;age.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>③ 修改值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameEditorComponent</span> &#123;<br>  <span class="hljs-title function_">ageChangeFunc</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>.<span class="hljs-title function_">setValue</span>(<span class="hljs-number">18</span>)<br>  &#125;<br>&#125;<br><br>年龄：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> [formControl]=<span class="hljs-string">&quot;age&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>age:&#123;&#123;age.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;ageChangeFunc()&quot;</span>&gt;</span>长大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="/posts/58911/2022-06-09-23-00-24.png"></p><h5 id="表单控件分组"><a href="#表单控件分组" class="headerlink" title="表单控件分组"></a><strong>表单控件分组</strong></h5><p>引入控件，创建一个 <strong>FormGroup</strong> 实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FormControl</span>,<span class="hljs-title class_">FormGroup</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameEditorComponent</span> &#123;<br>loginForm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormGroup</span>(&#123;<br>    <span class="hljs-attr">userName</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormControl</span>(<span class="hljs-string">&#x27;&#x27;</span>),<br>    <span class="hljs-attr">password</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormControl</span>(<span class="hljs-string">&#x27;&#x27;</span>),<br>  &#125;);<br>&#125;<br><br>&lt;form [formGroup]=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    账号:</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    密码:</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;subFormFunc()&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="/posts/58911/2022-06-09-23-00-58.png"></p><h5 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>    fromData=&#123;<br>       <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>       <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;;<br><br>    <span class="hljs-title function_">subBtnFUn</span>(<span class="hljs-params">obj</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br>    &#125;<br>&#125;<br><br>&lt;form  action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>  账号：&lt;input required #nameInp=<span class="hljs-string">&quot;ngModel&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> [(ngModel)]=<span class="hljs-string">&quot;fromData.name&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span>&gt;<br>  &lt;br&gt;<br>  &lt;!-- 验证是否通过 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>验证结果：&#123;&#123;nameInp.valid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  &lt;br&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;!nameInp.valid&quot;</span>&gt;</span>请输入账号<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  &lt;br&gt;<br>  密码：&lt;input required  #pasInp=<span class="hljs-string">&quot;ngModel&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> [(ngModel)]=<span class="hljs-string">&quot;fromData.password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>  &lt;br&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>验证结果：&#123;&#123;pasInp.valid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  &lt;br&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;subBtnFUn(nameInp)&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>我们还可以通过 <strong>ngModel</strong> 跟踪修改状态与有效性验证，它使用了三个 CSS 类来更新控件，以便反映当前状态。</p><table><thead><tr><th align="left">状态</th><th align="left">为 true 时的类</th><th align="left">为 false 时的类</th></tr></thead><tbody><tr><td align="left">控件已经被访问过</td><td align="left"><code>ng-touched</code></td><td align="left"><code>ng-untouched</code></td></tr><tr><td align="left">控件值已经变化</td><td align="left"><code>ng-dirty</code></td><td align="left"><code>ng-pristine</code></td></tr><tr><td align="left">控件值是有效的</td><td align="left"><code>ng-valid</code></td><td align="left"><code>ng-invalid</code></td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">.<span class="hljs-property">ng</span>-invalid&#123;<br>  border-<span class="hljs-attr">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果</p><p><img src="/posts/58911/2022-06-09-23-01-51.png"></p><h5 id="自定义表单验证"><a href="#自定义表单验证" class="headerlink" title="自定义表单验证"></a>自定义表单验证</h5><p><strong>验证器（Validator）函数</strong></p><ul><li><p>内置验证器函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Validators</span>.<span class="hljs-property">required</span>,<br><span class="hljs-title class_">Validators</span>.<span class="hljs-title function_">maxLength</span>(<span class="hljs-number">18</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="模板驱动表单"><a href="#模板驱动表单" class="headerlink" title="模板驱动表单"></a>模板驱动表单</h4><p><strong>区别</strong>：响应式表单和模板驱动表单之间的一些关键差异</p><p><img src="/posts/58911/2022-06-09-23-02-25.png"></p><h3 id="3-3-HTTP客户端"><a href="#3-3-HTTP客户端" class="headerlink" title="3.3 HTTP客户端"></a>3.3 HTTP客户端</h3><h3 id="3-4-Animations动画"><a href="#3-4-Animations动画" class="headerlink" title="3.4 Animations动画"></a>3.4 Animations动画</h3><h2 id="4-Tutorials"><a href="#4-Tutorials" class="headerlink" title="4. Tutorials"></a>4. Tutorials</h2><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/posts/29139.html"/>
    <url>/posts/29139.html</url>
    
    <content type="html"><![CDATA[<h2 id="第1章、机器学习概述"><a href="#第1章、机器学习概述" class="headerlink" title="第1章、机器学习概述"></a>第1章、机器学习概述</h2><p><strong>1.1 机器学习概念</strong></p><p>​一句话概括：通过经验的学习来提升计算机程序的性能</p><p>​深度学习：是“端到端”的，并不需要人为的干预，可以自动从数据特征提取有用的信息，但伴随的问题是其“可解释性”变弱，多层的神经网络类似于一个“黑盒子”，在进行算法优化的时候，调整超参数通常会很困难</p><p><strong>1.2 解决问题流程</strong></p><ol><li><p>确定分析目标</p></li><li><p>收集数据</p></li><li><p>数据预处理</p><p>数据集划分：训练集用于模型的训练，验证集用于验证当时的模型效果，测试集用于最终模型泛化能力的验证</p></li><li><p>模型训练</p></li><li><p>模型评估</p><p>目的：检验特征工程；检查参数调整</p></li></ol><p><strong>1.3 机器学习应用（深度学习）</strong></p><p>人脸识别、机器翻译、语音识别、情感分析、问答系统、无人驾驶（车道线识别，红绿灯识别以及行人和车辆的检测等）</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6新特性</title>
    <link href="/posts/42519.html"/>
    <url>/posts/42519.html</url>
    
    <content type="html"><![CDATA[<p>参考地址：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p><h2 id="1-let和const关键字"><a href="#1-let和const关键字" class="headerlink" title="1. let和const关键字"></a>1. let和const关键字</h2><h3 id="1-1-let关键字用于声明变量"><a href="#1-1-let关键字用于声明变量" class="headerlink" title="1.1 let关键字用于声明变量"></a>1.1 let关键字用于声明变量</h3><ul><li><p>变量不能重复声明</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> a<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>  <span class="hljs-comment">// a已经声明，此处为错误用法！</span><br></code></pre></td></tr></table></figure></li><li><p>块级作用域：if else while for<br>声明的变量只在 let 命令所在的代码块内有效</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>    let fruit=<span class="hljs-string">&#x27;apple&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fruit) <span class="hljs-comment">//error：fruit is undefined</span><br><br><span class="hljs-comment">// 在if()中同理</span><br></code></pre></td></tr></table></figure></li><li><p>不存在变量提升：不允许变量声明前使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 什么是变量提升：就是在变量创建之前使用<br><span class="hljs-regexp">//</span>（比如输出：输出的是默认值），let不存在，var存在<br><br>console.log(people1)   <span class="hljs-regexp">//</span> 可输出undefined<br>console.log(people2)  <span class="hljs-regexp">//</span> 报错：Uncaught ReferenceError: people2 is not defined<br>var people1 = <span class="hljs-string">&quot;Maria&quot;</span>  <span class="hljs-regexp">//</span> 存在变量提升<br>let people2 = <span class="hljs-string">&quot;Jim&quot;</span>  <span class="hljs-regexp">//</span> 不存在变量提升<br></code></pre></td></tr></table></figure></li><li><p>不影响作用域链</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">// 什么是作用域链:</span><br><span class="hljs-comment">// 不能从外向内找，作用域链是向外找</span><br>&#123;<br><span class="hljs-keyword">let</span> p = <span class="hljs-string">&quot;Maria&quot;</span> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">()</span></span>&#123;<br>console.log(p)  <span class="hljs-comment">// 输出Maria</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">()</span></span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>案例如：点击div更换背景颜色</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px; margin: 10px; border: 1px solid black; &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px; margin: 10px; border: 1px solid green; &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px;height: 50px; margin: 10px; border: 1px solid yellow;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> items=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;items.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">        items[i].<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            items[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span>=<span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(windows.<span class="hljs-property">i</span>);  <span class="hljs-comment">//3 </span></span><br><span class="language-javascript">    <span class="hljs-comment">// 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是let i，具有块级作用域，所以每一次触碰事件的i都是不同的。</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-const-关键字用于声明常量"><a href="#1-2-const-关键字用于声明常量" class="headerlink" title="1.2 const 关键字用于声明常量"></a>1.2 const 关键字用于声明常量</h3></li><li><p>声明必须赋初始值</p></li><li><p>常量一般为大写（习惯）</p></li><li><p>不允许重复声明</p></li><li><p>块级作用域</p></li><li><p>对<strong>数组</strong>和<strong>对象元素</strong>修改，不算对常量的修改，不会报错</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> FRUIT = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br>FRUIT.push(<span class="hljs-string">&#x27;watermalen&#x27;</span>); <span class="hljs-comment">//不报错，常量地址没有发生变化</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-变量的解构赋值"><a href="#2-变量的解构赋值" class="headerlink" title="2. 变量的解构赋值"></a>2. 变量的解构赋值</h2><p>ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。<br><strong>使用场景</strong>：频繁使用对象方法、数组元素，就可以使用解构赋值形式</p><h3 id="2-1-数组的解构"><a href="#2-1-数组的解构" class="headerlink" title="2.1 数组的解构"></a>2.1 数组的解构</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const BOOKS = [<span class="hljs-string">&#x27;三体&#x27;</span>,<span class="hljs-string">&#x27;海子的诗&#x27;</span>,<span class="hljs-string">&#x27;西游记&#x27;</span>]<br>let [san,hai,xi] = BOOKS <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(san); <span class="hljs-comment">// &#x27;三体&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(hai);  <span class="hljs-comment">// &#x27;孩子的诗&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xi);  <span class="hljs-comment">// &#x27;西游记&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-对象的解构"><a href="#2-2-对象的解构" class="headerlink" title="2.2 对象的解构"></a>2.2 对象的解构</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const ZHANGSAN = &#123;<br><span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">age</span> :  <span class="hljs-number">23</span> ,<br><span class="hljs-attr">gender</span> : <span class="hljs-string">&#x27;男&#x27;</span>,<br><span class="hljs-attr">speak</span> : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Hello,I&#x27;m ZhangSan!&quot;</span>)<br>&#125;<br>&#125;<br><br>let &#123;name,age,gender,speak&#125; = ZHANGSAN<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name);  <span class="hljs-comment">// &#x27;张三&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age);  <span class="hljs-comment">//   23 </span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(gender);  <span class="hljs-comment">//  &#x27;男&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(speak);  <span class="hljs-comment">//  function()&#123;...&#125;</span><br>speak();            <span class="hljs-comment">//  &quot;Hello,I&#x27;m ZhangSan!&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-模板字符串"><a href="#3-模板字符串" class="headerlink" title="3. 模板字符串"></a>3. 模板字符串</h2><p>使用一对反引号声明的字符串</p><ul><li>可以直接使用换行符<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> str = `<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>`<br>   <br><span class="hljs-keyword">let</span> hello = `噢早上好呀，<br>海绵宝宝~`<br></code></pre></td></tr></table></figure></li><li>变量拼接（替换&#x2F;插入）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;海绵宝宝&#x27;</span> <br><span class="hljs-keyword">let</span> hello = <span class="hljs-string">`早上好呀<span class="hljs-subst">$&#123;name&#125;</span>，好久不见。`</span> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hello)  <span class="hljs-comment">//  早上好呀海绵宝宝，好久不见 </span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4-对象的简化写法"><a href="#4-对象的简化写法" class="headerlink" title="4. 对象的简化写法"></a>4. 对象的简化写法</h2><p>允许在大括号里面，直接写入变量和函数，作为对象的属性和方法<br><img src="/posts/42519/2022-06-05-10-45-32.png"></p><h2 id="5-ES6函数"><a href="#5-ES6函数" class="headerlink" title="5. ES6函数"></a>5. ES6函数</h2><h3 id="5-1-箭头函数"><a href="#5-1-箭头函数" class="headerlink" title="5.1 箭头函数"></a>5.1 箭头函数</h3><p>省略function关键字，允许使用箭头 &#x3D;&gt;定义函数<br><strong>函数声明</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>  let fn = <span class="hljs-keyword">function</span>() &#123;<br><span class="hljs-regexp">//</span> ...<br><span class="hljs-regexp">//</span>  &#125;<br><br>let fn = (a,b) =&gt; &#123;<br>return a + b<br>&#125;<br><span class="hljs-regexp">//</span> 调用函数<br>console.log(fn(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));  <span class="hljs-regexp">//</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>特性</strong></p><ul><li>this是静态的，this<font color="red">始终指向</font>函数声明时所在作用域下的this的值<br>(普通函数：谁调用，this指向谁；箭头函数：在哪创建，this指向谁)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getName1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">getName2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) ;<br>&#125;<br><span class="hljs-comment">//创建window对象的name属性</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;蛙哈哈&#x27;</span>; <br><span class="hljs-keyword">const</span> school = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wahaha&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//直接调用</span><br><span class="hljs-title function_">getName1</span>();  <span class="hljs-comment">//蛙哈哈</span><br><span class="hljs-title function_">getName2</span>();  <span class="hljs-comment">//蛙哈哈</span><br><br><span class="hljs-comment">//call</span><br>getName1.<span class="hljs-title function_">call</span>(school);   <span class="hljs-comment">//普通：wahaha</span><br>getName2.<span class="hljs-title function_">call</span>(school) ;  <span class="hljs-comment">//箭头：蛙哈哈</span><br></code></pre></td></tr></table></figure></li><li>不能作为构造函数实例化对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">Person</span> = (<span class="hljs-params">name,age</span>) =&gt; &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-keyword">let</span> zhangsan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">20</span>);  <span class="hljs-comment">// error：zhangsan is not a constructor</span><br></code></pre></td></tr></table></figure></li><li>不能使用<font color="red">arguments</font>变量<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">let <span class="hljs-function"><span class="hljs-keyword">fn</span> = (<span class="hljs-params"></span>) =&gt;</span> &#123;<br>console.<span class="hljs-title function_ invoke__">log</span>(arguments) <span class="hljs-comment">// 错误</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span></span>) </span><br></code></pre></td></tr></table></figure></li><li>箭头函数的简写<ol><li>省略小括号：当形参有且只有一个的时候<br> <img src="/posts/42519/2022-06-05-11-17-18.png"></li><li>省略花括号{ }：仅当函数语句只有一条语句时。此时，’return’ 也需要省略，结果即是返回值<br> <img src="/posts/42519/2022-06-05-11-19-59.png"><br>案例<br>适合与this无关的回调：定时器、数组的方法回调<br>不适合与this有关的回调：事件回调、对象的方法<br><img src="/posts/42519/2022-06-07-09-26-58.png"><br><img src="/posts/42519/2022-06-07-09-30-13.png"></li></ol></li></ul><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown笔记</title>
    <link href="/posts/19972.html"/>
    <url>/posts/19972.html</url>
    
    <content type="html"><![CDATA[<p>不要改文件<br>文件名<br>好</p><p>#文件名是标题<br>ctrl + k v<br>先摁着ctrl 点k这俩摁完松手点v试试<br>松手再点vvv<br><strong>haole</strong>这个你再自个学去</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">这样也可以，<br>这种是最标准的<br></code></pre></td></tr></table></figure><p>代码块</p><p>hexo cl删除已有静态文件<br>hexo g生成静态文件<br>hexo s本地测试看有没有问题<br>hexo d<br>推送到云端（github）</p>]]></content>
    
    
    <categories>
      
      <category>小知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
